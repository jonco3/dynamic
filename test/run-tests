#!/usr/bin/env python

import argparse
import os
import re
import subprocess
import sys

parser = argparse.ArgumentParser(description='Run tests.')
parser.add_argument('command', metavar='CMD',
                    help='python interpreter command')
parser.add_argument('dirs', metavar='TEST_DIR', nargs='+',
                    help='directory containing tests to run')
args = parser.parse_args()
command = args.command.split()

testDir = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'tests')
benchDir = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'tests')

runCount = 0
passCount = 0

def runTest(dirname, name):
    global runCount, passCount
    runCount += 1
    filename = os.path.join(dirname, name)

    args = []
    expect = []

    with open(filename) as f:
        while True:
            line = f.readline().rstrip()
            match = re.match('# (\w+): (.*)$', line)
            if not match:
                break

            key, value = match.groups()
            if key == 'output':
                expect.append(value)
            elif key == 'args':
                args.extend(value.split())
            else:
                return 'BAD'

    if not expect:
        return 'BAD'

    try:
        ok = True
        output = subprocess.check_output(command + [filename] + args,
                                         stderr = subprocess.STDOUT)
    except subprocess.CalledProcessError as e:
        ok = False
        output = e.output

    if not ok:
        return 'FAIL'

    output = output.strip()
    if output != "\n".join(expect):
        print "Expected: " + "|".join(expect)
        print "Actual:   " + output.replace("\n", "|")
        return 'FAIL'

    passCount += 1
    return 'PASS'

def runTestDir(arg, dirname, names):
    for name in names:
        if name.endswith('.py'):
            result = runTest(dirname, name)
            if result != 'PASS':
                result = '     ' + result
            print('  %-20s %s' % (name, result))

print("Running tests...")
for testDir in args.dirs:
    os.path.walk(testDir, runTestDir, None)
print("%d tests passed out of %d" % (passCount, runCount))
if passCount != runCount:
    sys.exit(1)
