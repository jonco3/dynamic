#!/usr/bin/env python3

import argparse
import os
import re
import subprocess
import sys
import time

parser = argparse.ArgumentParser(description='Run tests.')
parser.add_argument('--benchmark', action='store_true',
                    help = 'Output time take to run tests')
parser.add_argument('command', metavar='CMD',
                    help='python interpreter command')
parser.add_argument('dirs', metavar='TEST_DIR', nargs='+',
                    help='directory containing tests to run')
args = parser.parse_args()
command = args.command.split()

testDir = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'tests')
benchDir = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'tests')

runCount = 0
passCount = 0

def runTest(dirname, name):
    global runCount, passCount
    runCount += 1
    filename = os.path.join(dirname, name)

    args = []
    expect = []

    with open(filename) as f:
        while True:
            line = f.readline().rstrip()
            match = re.match('# (\w+): (.*)$', line)
            if not match:
                break

            key, value = match.groups()
            if key == 'output':
                expect.append(value)
            elif key == 'args':
                args.extend(value.split())
            else:
                return 'BAD', 'Error parsing header option: ' + key

    if not expect:
        return 'BAD', 'No expected output header'

    ok = True
    startTime = time.perf_counter()
    try:
        output = subprocess.check_output(command + [filename] + args,
                                         stderr = subprocess.STDOUT)
        endTime = time.perf_counter()
        output = output.decode()
    except subprocess.CalledProcessError as e:
        ok = False
        output = e.output

    if not ok:
        return 'FAIL', 'Execution failed: ' + output

    output = output.strip()
    if output != "\n".join(expect):
        message = ('    Output did not match expected:\n' +
                   '      Expected: ' + '|'.join(expect) + '\n' +
                   '      Actual:   ' + output.replace('\n', '|'))
        return 'FAIL', message

    passCount += 1
    return 'PASS', endTime - startTime

def formatTime(secs):
    return "%6.2f" % (secs * 1000)

def runTestDir(dirname, names):
    for name in names:
        if name.endswith('.py'):
            result, extra = runTest(dirname, name)
            header = '  %-20s ' % name
            if result != 'PASS':
                print(header + ' ' + result)
                print(extra)
            elif args.benchmark:
                print(header + '       ' + formatTime(extra))
            else:
                print(header)

print("Running tests...")
for testDir in args.dirs:
    for dirpath, dirnames, filenames in os.walk(testDir):
        runTestDir(dirpath, filenames)
print("%d tests passed out of %d" % (passCount, runCount))
if passCount != runCount:
    sys.exit(1)
